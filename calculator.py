from typing import List, Tuple, Dict, Any
from collections import defaultdict


class DebtCalculator:
    @staticmethod
    def calculate_debts(expenses: List[Tuple]) -> Tuple[Dict[str, float], List[Tuple]]:
        """
        –†–∞—Å—á–µ—Ç –¥–æ–ª–≥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–∞—Å—Ö–æ–¥–æ–≤

        Returns:
            Tuple —Å –±–∞–ª–∞–Ω—Å–∞–º–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–ø–æ –∏–º–µ–Ω–∞–º) –∏ —Å–ø–∏—Å–∫–æ–º –¥–æ–ª–≥–æ–≤
        """
        total_spent = 0.0
        user_spends = defaultdict(float)

        for expense in expenses:
            user_name = expense[2]  # full_name
            amount = expense[3]

            total_spent += amount
            user_spends[user_name] += amount

        if total_spent == 0:
            return {}, []

        share = total_spent / 3
        balances = {}
        for user_name, spent in user_spends.items():
            balances[user_name] = spent - share

        creditors = []
        debtors = []

        for user_name, balance in balances.items():
            if balance > 0.01:
                creditors.append((user_name, balance))
            elif balance < -0.01:
                debtors.append((user_name, abs(balance)))

        creditors.sort(key=lambda x: x[1], reverse=True)
        debtors.sort(key=lambda x: x[1], reverse=True)

        debts_list = []
        creditor_index = 0
        debtor_index = 0

        while creditor_index < len(creditors) and debtor_index < len(debtors):
            creditor_name, credit_amount = creditors[creditor_index]
            debtor_name, debt_amount = debtors[debtor_index]

            transfer = min(credit_amount, debt_amount)

            debts_list.append((
                debtor_name, creditor_name, transfer
            ))

            credit_amount -= transfer
            debt_amount -= transfer

            creditors[creditor_index] = (creditor_name, credit_amount)
            debtors[debtor_index] = (debtor_name, debt_amount)

            if credit_amount < 0.01:
                creditor_index += 1
            if debt_amount < 0.01:
                debtor_index += 1

        return balances, debts_list

    @staticmethod
    def format_debts_message(balances: Dict[str, float], debts: List[Tuple], total_spent: float) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –¥–æ–ª–≥–∞–º–∏"""
        if not balances:
            return "üìä –ü–æ–∫–∞ –Ω–µ—Ç –Ω–∏–∫–∞–∫–∏—Ö —Ä–∞—Å—Ö–æ–¥–æ–≤"

        share = total_spent / 3
        message = [
            "üí∏ *–¢–µ–∫—É—â–∏–µ —Ä–∞—Å—á–µ—Ç—ã:*",
            f"–û–±—â–∞—è —Å—É–º–º–∞: {total_spent:.2f} —Ä—É–±.",
            f"–î–æ–ª—è –∫–∞–∂–¥–æ–≥–æ: {share:.2f} —Ä—É–±.",
            "",
            "üìã *–ë–∞–ª–∞–Ω—Å—ã:*"
        ]

        for user_name, balance in balances.items():
            status = "‚úÖ" if abs(balance) < 0.01 else "‚ûñ" if balance < 0 else "‚ûï"
            message.append(f"{status} {user_name}: {balance:+.2f} —Ä—É–±.")

        if debts:
            message.extend(["", "ü§ù *–ö—Ç–æ –∫–æ–º—É –¥–æ–ª–∂–µ–Ω:*"])
            for i, (debtor_name, creditor_name, amount) in enumerate(debts, 1):
                message.append(f"{i}. {debtor_name} ‚Üí {creditor_name}: {amount:.2f} —Ä—É–±.")

        return "\n".join(message)