import os
import logging
from dotenv import load_dotenv
from telegram import Update, ReplyKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import (
    Application, CommandHandler, MessageHandler, ContextTypes,
    ConversationHandler, filters
)
from database import Database
from calculator import DebtCalculator

load_dotenv()

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

AMOUNT, DESCRIPTION = range(2)

db_path = os.path.join(os.getcwd(), 'data', 'expenses.db')
db = Database(db_path)
calculator = DebtCalculator()

TOKEN = os.getenv('BOT_TOKEN')

if not TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    exit(1)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    user = update.effective_user
    db.add_user(user.id, user.username, user.full_name)

    keyboard = [
        ['üí≥ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥', 'üìä –ë–∞–ª–∞–Ω—Å'],
        ['üìù –ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã', 'üìã –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã'],
        ['üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ë–î']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—â–∏–º–∏ —Ä–∞—Å—Ö–æ–¥–∞–º–∏\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=reply_markup
    )


async def add_expense_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ù–∞—á–∞–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"""
    await update.message.reply_text(
        "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ä–∞—Å—Ö–æ–¥–∞:",
        reply_markup=ReplyKeyboardRemove()
    )
    return AMOUNT


async def add_expense_amount(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å—É–º–º—ã —Ä–∞—Å—Ö–æ–¥–∞"""
    try:
        amount = float(update.message.text.replace(',', '.'))
        if amount <= 0:
            await update.message.reply_text("–°—É–º–º–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π:")
            return AMOUNT

        context.user_data['amount'] = amount

        skip_keyboard = ReplyKeyboardMarkup([['‚ûñ –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è']], resize_keyboard=True)
        await update.message.reply_text(
            "–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ —Ä–∞—Å—Ö–æ–¥–∞:",
            reply_markup=skip_keyboard
        )
        return DESCRIPTION

    except ValueError:
        await update.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É:")
        return AMOUNT


async def add_expense_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–ø–∏—Å–∞–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"""
    if update.message.text == '‚ûñ –ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è':
        return await skip_description(update, context)

    description = update.message.text
    context.user_data['description'] = description
    return await finish_expense(update, context)


async def skip_description(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü—Ä–æ–ø—É—Å–∫ –æ–ø–∏—Å–∞–Ω–∏—è"""
    context.user_data['description'] = None

    keyboard = [
        ['üí≥ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥', 'üìä –ë–∞–ª–∞–Ω—Å'],
        ['üìù –ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã', 'üìã –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã'],
        ['üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ë–î']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    amount = context.user_data['amount']
    db.add_expense(update.effective_user.id, amount, None)

    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω\n–°—É–º–º–∞: {amount:.2f} —Ä—É–±.",
        reply_markup=reply_markup
    )

    context.user_data.clear()
    return ConversationHandler.END


async def finish_expense(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–∞—Å—Ö–æ–¥–∞"""
    user = update.effective_user
    amount = context.user_data['amount']
    description = context.user_data.get('description')

    db.add_expense(user.id, amount, description)

    keyboard = [
        ['üí≥ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥', 'üìä –ë–∞–ª–∞–Ω—Å'],
        ['üìù –ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã', 'üìã –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã'],
        ['üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ë–î']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    desc_text = f" ({description})" if description else ""
    await update.message.reply_text(
        f"‚úÖ –†–∞—Å—Ö–æ–¥ –¥–æ–±–∞–≤–ª–µ–Ω\n–°—É–º–º–∞: {amount:.2f} —Ä—É–±.{desc_text}",
        reply_markup=reply_markup
    )

    context.user_data.clear()
    return ConversationHandler.END


async def show_debts(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–µ –±–∞–ª–∞–Ω—Å—ã"""
    expenses = db.get_all_expenses()
    total_spent = sum(expense[3] for expense in expenses)

    balances, debts = calculator.calculate_debts(expenses)
    message = calculator.format_debts_message(balances, debts, total_spent)

    await update.message.reply_text(message, parse_mode='Markdown')


async def show_my_expenses(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–∞—Å—Ö–æ–¥—ã —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user = update.effective_user
    expenses = db.get_user_expenses(user.id)

    if not expenses:
        await update.message.reply_text("–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤")
        return

    message = [f"üìù –í–∞—à–∏ —Ä–∞—Å—Ö–æ–¥—ã:", ""]
    total = 0

    for expense in expenses[:15]:
        amount = expense[0]
        description = f" - {expense[1]}" if expense[1] else ""
        date = expense[2].split()[0] if expense[2] else ""

        message.append(f"‚Ä¢ {amount:.2f} —Ä—É–±.{description} ({date})")
        total += amount

    message.extend([
        "",
        f"–í—Å–µ–≥–æ: {total:.2f} —Ä—É–±.",
        f"–í–∞—à–∞ –¥–æ–ª—è: {total/3:.2f} —Ä—É–±." if total > 0 else ""
    ])

    await update.message.reply_text("\n".join(message))


async def show_all_expenses(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ä–∞—Å—Ö–æ–¥—ã"""
    expenses = db.get_all_expenses()

    if not expenses:
        await update.message.reply_text("–†–∞—Å—Ö–æ–¥—ã –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç")
        return

    message = ["üìã –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã:", ""]
    total = 0
    user_totals = {}

    for expense in expenses[:15]:
        user_name = expense[2]
        amount = expense[3]
        description = f" - {expense[4]}" if expense[4] else ""
        date = expense[5].split()[0] if expense[5] else ""

        message.append(f"‚Ä¢ {user_name}: {amount:.2f} —Ä—É–±.{description} ({date})")
        total += amount

        if user_name in user_totals:
            user_totals[user_name] += amount
        else:
            user_totals[user_name] = amount

    message.extend(["", "üìä –ò—Ç–æ–≥–∏:"])
    for user_name, user_total in user_totals.items():
        message.append(f"‚Ä¢ {user_name}: {user_total:.2f} —Ä—É–±.")

    message.extend([
        "",
        f"–û–±—â–∞—è —Å—É–º–º–∞: {total:.2f} —Ä—É–±.",
        f"–î–æ–ª—è –∫–∞–∂–¥–æ–≥–æ: {total/3:.2f} —Ä—É–±." if total > 0 else ""
    ])

    await update.message.reply_text("\n".join(message))


async def clear_database(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—á–∏—Å—Ç–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    confirm_keyboard = ReplyKeyboardMarkup([
        ['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∞']
    ], resize_keyboard=True)

    await update.message.reply_text(
        "–û—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?\n–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å.",
        reply_markup=confirm_keyboard
    )


async def handle_clear_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—á–∏—Å—Ç–∫–∏"""
    if update.message.text == '‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å':
        db.clear_all_data()

        keyboard = [
            ['üí≥ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥', 'üìä –ë–∞–ª–∞–Ω—Å'],
            ['üìù –ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã', 'üìã –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã'],
            ['üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ë–î']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ—á–∏—â–µ–Ω–∞",
            reply_markup=reply_markup
        )
    else:
        keyboard = [
            ['üí≥ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥', 'üìä –ë–∞–ª–∞–Ω—Å'],
            ['üìù –ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã', 'üìã –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã'],
            ['üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ë–î']
        ]
        reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ",
            reply_markup=reply_markup
        )


async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–π –æ–ø–µ—Ä–∞—Ü–∏–∏"""
    keyboard = [
        ['üí≥ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥', 'üìä –ë–∞–ª–∞–Ω—Å'],
        ['üìù –ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã', 'üìã –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã'],
        ['üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ë–î']
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

    await update.message.reply_text(
        "–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=reply_markup
    )
    context.user_data.clear()
    return ConversationHandler.END


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    text = update.message.text

    if text == 'üí≥ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥':
        return await add_expense_start(update, context)
    elif text == 'üìä –ë–∞–ª–∞–Ω—Å':
        return await show_debts(update, context)
    elif text == 'üìù –ú–æ–∏ —Ä–∞—Å—Ö–æ–¥—ã':
        return await show_my_expenses(update, context)
    elif text == 'üìã –í—Å–µ —Ä–∞—Å—Ö–æ–¥—ã':
        return await show_all_expenses(update, context)
    elif text == 'üóëÔ∏è –û—á–∏—Å—Ç–∏—Ç—å –ë–î':
        return await clear_database(update, context)
    elif text in ['‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å', '‚ùå –û—Ç–º–µ–Ω–∞']:
        return await handle_clear_confirmation(update, context)
    else:
        if context.user_data.get('amount') and not context.user_data.get('description'):
            return await add_expense_description(update, context)

        await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é:")


def main():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
    if not TOKEN:
        logger.error("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω! –°–æ–∑–¥–∞–π—Ç–µ —Ñ–∞–π–ª .env —Å BOT_TOKEN=your_token")
        return

    application = Application.builder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[MessageHandler(filters.Regex('^üí≥ –î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥$'), add_expense_start)],
        states={
            AMOUNT: [MessageHandler(filters.TEXT & ~filters.COMMAND, add_expense_amount)],
            DESCRIPTION: [MessageHandler(filters.TEXT, add_expense_description)],
        },
        fallbacks=[CommandHandler('cancel', cancel)]
    )

    application.add_handler(CommandHandler('start', start))
    application.add_handler(conv_handler)
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()


if __name__ == '__main__':
    main()